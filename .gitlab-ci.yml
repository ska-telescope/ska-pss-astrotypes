variables:
    GIT_STRATEGY: clone

stages:
  - build
  - lint
  - test
  - publish-docs

.common:
  rules:
      # Execute pipeline automatically if commit is made to dev or main
      # (this should only happen when code is merged to dev or main)
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"

      # Create but do not execute pipeline for feature branches on commit,
      # or if created via the gitlab GUI
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "api"
      when: manual
      allow_failure: false

      # Execute pipeline if triggered by a schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"

      # Execute pipeline automatically if triggered by a MR
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

.builds:
  stage: build
  extends: .common
  tags:
    - ubuntu-18.04
  script:
    - mkdir build && cd build
    - cmake -DCMAKE_INSTALL_PREFIX=../install $CMAKE_FLAGS ..
    - make -j
    - make -j install
  artifacts:
    name: "$CI_COMMIT_REF_NAME-build"
    paths:
      - build/*
    expire_in: 1 d

lint:
  stage: lint
  image: ubuntu:22.04
  rules:
      # Execute job automatically if commit is made to dev or main
      # (this should only happen when code is merged to dev or main)
    - if: $CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "main"
      allow_failure: true

      # Execute job if triggered by a schedule
    - if: $CI_PIPELINE_SOURCE == "schedule"
      allow_failure: true

      # Execute job automatically if triggered by a MR
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: true
  tags:
    - k8srunner
  script:
    - apt-get -y update
    - apt install -y cmake
    - cmake --version
    - apt install -y python3 gcc g++ libboost-program-options-dev libboost-system-dev libboost-filesystem-dev libfftw3-dev git
    - apt install -y clang-tidy
    - clang-tidy --version
    - 'cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
      -DCMAKE_BUILD_TYPE=release -DENABLE_CUDA=false'
    - 'run-clang-tidy -checks=''cppcoreguidelines-*,performance-*,readibility-*,modernize-*,misc-*,clang-analyzer-*,google-*,
      -cppcoreguidelines-pro-type-reinterpret-cast,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-modernize-use-nodiscard''
      -quiet 2>&1 | tee clang-tidy.log'
  artifacts:
    name: "$CI_COMMIT_REF_NAME-lint"
    when: on_failure
    paths:
      - /build/clang-tidy.log
    expire_in: 1 d
  
.tests:
  stage: test
  extends: .common
  tags:
    - ubuntu-18.04
  script:
    - cd build
    - make test

build-release:
  extends: .builds
  variables:
    CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=release"

build-debug:
  extends: .builds
  variables:
    CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=debug"

build-nasm-release:
  extends: .builds
  variables:
    CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=release -DENABLE_NASM=true"

build-nasm-debug:
  extends: .builds
  variables:
    CMAKE_FLAGS: "DCMAKE_BUILD_TYPE=debug -DENABLE_NASM=true"

test-release:
  extends: .tests
  needs:
    - build-release

test-debug:
  extends: .tests
  needs:
    - build-debug

test-nasm-release:
  extends: .tests
  needs:
    - build-nasm-release

test-nasm-debug:
  extends: .tests
  needs:
    - build-nasm-debug

doc-build:
  stage: build
  image: alpine
  script:
    - apk update && apk add git build-base cmake3 doxygen graphviz ttf-freefont
    - git clone https://gitlab.com/ska-telescope/pss/ska-pss-astrotypes.git
    - mkdir build-docs
    - cd build-docs
    - cmake3 -DCMAKE_BUILD_TYPE=documentation -DPANDA_SOURCE_DIR=../panda/ -DASTROTYPES_SOURCE_DIR=../astrotypes ../
    - make doc
  artifacts:
    paths:
      - build-docs/
  only:
    - main

pages:
  stage: publish-docs
  image: alpine
  script:
    - mv build-docs/doc/html/ public/
  needs:
    - doc-build
  artifacts:
    paths:
      - public/
  only:
    - main
